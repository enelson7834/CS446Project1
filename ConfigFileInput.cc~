ConfigFileInput( char* fileName )
{
    FilePath = new char[ 30 ];
    LogFilePath = new char[ 30 ];

    LogOutputSpecification = 'E';
    VersionNumber = -1;
    
    strcpy( FilePath, "None" );
    strcpy( LogFilePath, "None" );
    
    Processor = -1;
    Moniter = -1;
    HardDrive = -1;
    Printer = -1;
    Keyboard = -1;
    Memory = -1;
    Mouse = -1;
    Speaker = -1;
    SystemMemory = -1;

    if( strstr( fileName, ".conf" ) == NULL )
    {
        cout << "Error in configuration file path. Incorrect extention." 
             << endl;

        strcpy( FilePath, "None" );
        aLogOutputSpecification = 'E';
        strcpy( aLogFilePath, "None" );
        return;
    }
    
    ifstream fin;
    fin.open( fileName );

    if( !fin.good() )
    {
        cout << "Error opening configuration file. Please check the file name"
             << " and run again." << endl;

        strcpy( FilePath, "None" );
        aLogOutputSpecification = 'E';
        strcpy( LogFilePath, "None" );
        return;
    } 
    else
    {
        if( strncmp( lineToParse, "\n", 1 ) == 0 )
    {
        return false;
    }
    else if( strncmp( lineToParse, "Start Sim", 9 ) == 0 )
    {
        return true;
    } 
    else if( strncmp( lineToParse, "Version", 7 ) == 0 )
    {
        return true;
    }
    else if( strncmp( lineToParse, "File Path:", 10 ) == 0 )
    {
        char tempFileName[ STR_MAX_LENGTH ];
        int position = 0;
        while( lineToParse[ position + 11 ] != '\n' 
                && position < STR_MAX_LENGTH )
        {
            tempFileName[ position ] = lineToParse[ position + 11 ];
            position++;
        }
        tempFileName[ position ] = '\0';

        if( strstr( lineToParse, ".mdf" ) == NULL )
        {
            cout << "Error in test file path. Incorrect extention." << endl;
            return false;
        }

        strcpy( aFilePath, tempFileName ); 

        return true;
    }
    else if( strncmp( lineToParse, "Log:", 4 ) == 0 )
    {
        if( aLogOutputSpecification != 'E' )
        {
            return true;
        }

        if( strstr( lineToParse, "Moniter" ) != NULL )
        {
            aLogOutputSpecification = 'M';
        }
        else if( strstr( lineToParse, "File" ) != NULL )
        {
            if( aLogOutputSpecification == 'm' )
            {
                aLogOutputSpecification = 'E';
            }
            else
            {
                aLogOutputSpecification = 'F';
            }
        }
        else if( strstr( lineToParse, "Both" ) != NULL )
        {
            if( aLogOutputSpecification == 'm' )
            {
                aLogOutputSpecification = 'M';
            }
            else
            {
                aLogOutputSpecification = 'B';
            }
        }
        else
        {
            cout << "Error in log specification. No valid specification given."
                 << endl;
            aLogOutputSpecification = 'E';
            return false;
        }

        return true;
    }
    else if( strncmp( lineToParse, "Log File Path:", 14 ) == 0 )
    {
        char tempFileName[ STR_MAX_LENGTH ];
        int position = 0;
        while( lineToParse[ position + 15 ] != '\n' 
                && position < STR_MAX_LENGTH )
        {
            tempFileName[ position ] = lineToParse[ position + 15 ];
            position++;
        }
        tempFileName[ position ] = '\0';

        if( strstr( lineToParse, ".out" ) == NULL )
        {
            cout << "Error in log file path. Incorrect extention. Will "
                 << "only log to moniter." << endl;
            aLogOutputSpecification = 'm';
        }
        if( strpbrk( tempFileName, " " ) != NULL )
        {
            cout << "Error in log file path. Incorrect extention. Will "
                 << "only log to moniter." << endl;
            aLogOutputSpecification = 'm';
        }

        strcpy( aLogFilePath, tempFileName ); 

        return true;
    }
    else if( strncmp( lineToParse, "End Sim", 7 ) == 0 )
    {
        return true;
    }
    else
    {
        char* tempHelper = new char[ 10 ];
        char tempProcessName[ 30 ] = {'\0'};
        int tempProcessValue = -1;
        char* tempValueToken;
        char* tempNameToken;

        tempValueToken = strpbrk( lineToParse, ":" );
        strcpy( tempHelper, tempValueToken + 1 );
        
        RemoveSpaces( tempHelper );
        tempProcessValue = atoi( tempHelper );
        
        tempNameToken = strtok( lineToParse, " :;" );
        while( strpbrk( tempNameToken, "(" ) == NULL )
        {
            strcat( tempProcessName, tempNameToken );
            strcat( tempProcessName, " " );
            tempNameToken = strtok( NULL, " " );
        }

        int goodToCut = 0;
        for( unsigned int i = strlen( tempProcessName ); i > 0; i-- )
        {
            if( tempProcessName[ i ] == ' ' )
            {
                if( goodToCut == 2 )
                {
                    tempProcessName[ i ] = '\0';
                    goodToCut++;
                } 
                else
                {
                    goodToCut++;
                }
            }
        }

        for( unsigned int i = 0; i < strlen( tempProcessName ); i++ )
        {
           tempProcessName[ i ] = tolower( tempProcessName[ i ] );
        }
        
        ConfigFileInputNode* tempNode = new ConfigFileInputNode( tempProcessName, tempProcessValue );

        aListOfProcesses->InsertEntry(  0, *tempNode );
              
        return true;
    }
}
~ConfigFileInput( );

int GetProcessValue( char* process );
